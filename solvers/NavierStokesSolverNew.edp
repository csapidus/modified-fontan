//Unsteady Stokes problem for a TCPC
// UNITS
// grams, seconds, millimiters

load "msh3"
//load "iovtk"
load "medit"
load "gmsh"

string path="./";

//mesh3 Th = gmshload3("../mesh/bypass-with-cone-exampleCoarse.msh");
mesh3 Th = gmshload3(path+"bypass-with-cone-exampleCoarse.msh");

verbosity = 1;

real rho = 1.06; // Density (g/cm^3)
real mu = 0.035; // Dynamic viscosity (g/cm.s)
real nu = mu; // Kinematic viscosity
real pl = 10132.472; //min pressure in (Th,30) in dyn/cm^2
real pr = 10100.15; //min pressure in (Th,35)
real pi = 10500.76; // min pressure in (Th,20) and (Th,25)
int rup = 0.95; //radii in cm
int rdw = 1.50;
fespace Uh(Th,P2);
Uh ux,uy,uz,vx,vy,vz,uxlast,uylast,uzlast;
fespace Ph(Th,P1);
Ph p,q;
real xdw = -3.;
real xup = -3.;
real upm, velNorm, delta; // quantities relevant for SD stabilization
real vsq = 0.0001; // a very small quantity to guarantee minimal stabilization SD

// Files with pressures
// measures sampled every 0.0001 seconds
real dtsampling = 0.0001;
real Thb = 0.536; // heart beat duration in a child
int nsamples = 5360; // number of samples we readreal[int,int] Pinf(nsamples,2);
real[int,int] Pinf(nsamples,2);
real[int,int] Pleft(nsamples,2);
real[int,int] Pright(nsamples,2);
//ifstream Inlet("../datasets/updated_flows_dynescm2/inlet.txt");
//ifstream Left("../datasets/updated_flows_dynescm2/left.txt");
//ifstream Right("../datasets/updated_flows_dynescm2/right.txt");
ifstream Inlet("Inlet.txt");
ifstream Left("Left.txt");
ifstream Right("Right.txt");


/*for (int i = 0; i< nsamples; i++)
{
 for (int j=0; j<=1; j++)
 {
   Inlet >> Pinf(i,j);   Right >> Pright(i,j);   Left >> Pleft(i,j);
 }
  cout << Pinf(i,0) << " " << Pinf(i,1) << endl;
  cout << Pleft(i,0) << " " << Pleft(i,1) << endl;
  cout << Pright(i,0) << " " << Pright(i,1) << endl;
//   cout << time << comma << inletP[i] << endl;
//   Prf >> time >> comma >> rightP[i] >> endl;
//   Plf >> time >> comma >> leftP[i] >> endl;
//
}
*/

//pl=Pleft(0,1);
//pr=Pright(0,1);
//pi=Pinf(0,1);


//func uup=-1000*(rup^2 - ((x-xup)^2+z^2));
//func udw=1000*(rdw^2 - ((x-xdw)^2+z^2));
//func pex=pi-(pi-po)*z/L;

problem stokes([ux,uy,uz,p],[vx,vy,vz,q],solver=GMRES,eps=1.e-6) =
  int3d(Th) ( nu * ( dx(ux)*dx(vx) + dy(ux)*dy(vx) + dz(ux)*dz(vx) + //
		     dx(uy)*dx(vy) + dy(uy)*dy(vy) + dz(uy)*dz(vy) + // \int_{Th}\grad(u):\grad{v}
		     dx(uz)*dx(vz) + dy(uz)*dy(vz) + dz(uz)*dz(vz) ) )  //
   - int3d(Th) ( p*(dx(vx) + dy(vy) + dz(vz)))
  + int3d(Th) ( q*( dx(ux)+dy(uy)+dz(uz) ) )
//the pressure condition on our outlet
+ int2d(Th,30)(pl*N.x*vx+pl*N.y*vy+pl*N.z*vz)
+ int2d(Th,35)(pr*N.x*vx+pr*N.y*vy+pr*N.z*vz)
+ int2d(Th,20)(pi*N.x*vx+pi*N.y*vy+pi*N.z*vz)
+ int2d(Th,25)(pi*N.x*vx+pi*N.y*vy+pi*N.z*vz)
//+ int2d(Th,25)((ux*N.x+uy*N.y+uz*N.z)*(N.x*vx+N.y*vy+N.z*vz))
//the dirichlet condition for the inflow
//+ on(20,ux=0.0,uy=uup,uz=0.0)
//+ on(25,ux=0.0,uy=udw,uz=0.0)
+ on(10,ux=0.0,uy=0.0,uz=0.0);

cout << "Initializing with stokes... " << endl;
stokes;
cout << "done!" << endl;
    velNorm = int3d(Th)((ux)^2 + (uy)^2 + (uz)^2);
    velNorm = sqrt(abs(velNorm));
    upm = velNorm + vsq;


//real inletP [nsamples];
//real rightP [nsamples];
//real leftP [nsamples];
//real time;
//string comma;

//ifstream Pinf("./Replicating Dataset/Inlet.csv");
//ifstream Prf("./Replicating Dataset/Right.csv");
//ifstream Plf("./Replicating Dataset/Left.csv");

//for (i = 0; i< nsamples; i++)
//{
//   Pinf >> time >> comma >> inletP[i] >> endl;
//   cout << time << comma << inletP[i] << endl;
//   Prf >> time >> comma >> rightP[i] >> endl;
//   Plf >> time >> comma >> leftP[i] >> endl;
//
//}


//File path and name for your vtk output.
// ofstream kout("../visualizations/TCPC02.vtk");
// include "vtkexport.edp";


real dt= dtsampling;
real dti= rho/dt;
real nmax= 5360;
real t;
uxlast[] = ux[];
uylast[] = uy[];
uzlast[] = uz[];


problem SINavierStokes ([ux,uy,uz,p],[vx,vy,vz,q],solver=GMRES,eps=1.e-6) =
       int3d(Th)(dti*ux*vx + dti*uy*vy + dti*uz*vz )
     + int3d(Th)(nu* ( dx(ux)*dx(vx) + dy(ux)*dy(vx) +dz(ux)*dz(vx)
       + dx(uy)*dx(vy) + dy(uy)*dy(vy) + dz(uy)*(vy)
       + dx(uz)*dx(vz) + dy(uz)*dy(vz) + dz(uz)*dz(vz) ))
     + int3d(Th)(uxlast*dx(ux)*vx + uxlast*dx(uy)*vy+ uxlast*dx(uz)*vz+
       uylast*dy(ux)*vx + uylast*dy(uy)*vy +uylast*dy(uz)*vz+
       uzlast*dz(ux)*vx +uzlast*dz(uy)*vy +uzlast*dz(uz)*vz)
     - int3d(Th)(p*dx(vx) + p*dy(vy) + p*dz(vz))
     - int3d(Th)(dx(ux)*q + dy(uy)*q + dz(uz)*q)
     - int3d(Th)(dti*uxlast*vx + dti*uylast*vy + dti*uzlast*vz)
     // STABILIZATION (SD)
       + int3d(Th)(delta/upm*hTriangle*uxlast*dx(ux)*uxlast*dx(vx)+   // streamline diffusion: next 27 terms
              delta/upm*hTriangle*uxlast*dx(uy)*uxlast*dx(vy)+
              delta/upm*hTriangle*uxlast*dx(uz)*uxlast*dx(vz)+
              delta/upm*hTriangle*uxlast*dx(ux)*uylast*dy(vx)+
              delta/upm*hTriangle*uxlast*dx(ux)*uzlast*dz(vx)+
              delta/upm*hTriangle*uxlast*dx(uy)*uylast*dy(vy)+
              delta/upm*hTriangle*uxlast*dx(uy)*uzlast*dz(vy)+
            delta/upm*hTriangle*uxlast*dx(uz)*uylast*dy(vz)+
              delta/upm*hTriangle*uxlast*dx(uz)*uzlast*dz(vz)+
              delta/upm*hTriangle*uylast*dy(ux)*uxlast*dx(vx)+
              delta/upm*hTriangle*uylast*dy(uy)*uxlast*dx(vy)+
              delta/upm*hTriangle*uylast*dy(uz)*uxlast*dx(vz)+
              delta/upm*hTriangle*uylast*dy(ux)*uylast*dy(vx)+
              delta/upm*hTriangle*uylast*dy(ux)*uzlast*dz(vx)+
              delta/upm*hTriangle*uylast*dy(uy)*uylast*dy(vy)+
              delta/upm*hTriangle*uylast*dy(uy)*uzlast*dz(vy)+
            delta/upm*hTriangle*uylast*dy(uz)*uylast*dy(vz)+
              delta/upm*hTriangle*uylast*dy(uz)*uzlast*dz(vz)+
              delta/upm*hTriangle*uzlast*dz(ux)*uxlast*dx(vx)+
              delta/upm*hTriangle*uzlast*dz(uy)*uxlast*dx(vy)+
              delta/upm*hTriangle*uzlast*dz(uz)*uxlast*dx(vz)+
              delta/upm*hTriangle*uzlast*dz(ux)*uylast*dy(vx)+
              delta/upm*hTriangle*uzlast*dz(ux)*uzlast*dz(vx)+
              delta/upm*hTriangle*uzlast*dz(uy)*uylast*dy(vy)+
              delta/upm*hTriangle*uzlast*dz(uy)*uzlast*dz(vy)+
            delta/upm*hTriangle*uzlast*dz(uz)*uylast*dy(vz)+
              delta/upm*hTriangle*uzlast*dz(uz)*uzlast*dz(vz))
     //the pressure condition on our outlet
     // + int2d(Th,30)(po*N.x*vx+po*N.y*vy+po*N.z*vz)
     //the dirichlet condition for the inflow
     + int2d(Th,30)(pl*N.x*vx+pl*N.y*vy+pl*N.z*vz)
     + int2d(Th,35)(pr*N.x*vx+pr*N.y*vy+pr*N.z*vz)
     + int2d(Th,20)(pi*N.x*vx+pi*N.y*vy+pi*N.z*vz)
     + int2d(Th,25)(pi*N.x*vx+pi*N.y*vy+pi*N.z*vz)    //+ on(20,ux=0,uy=0,uz=uzex)
     + on(10,ux=0.,uy=0.,uz=0.);

// ulast = ustokes
delta = 0.1;

for (int i = 0; i< (nmax * 2); i++) {
    t=dt*i;
    SINavierStokes;
    uxlast=ux;
    uylast=uy;
    uzlast=uz;
    velNorm = int3d(Th)((ux)^2 + (uy)^2 + (uz)^2);
    velNorm = sqrt(abs(velNorm));
    upm = velNorm + vsq;
    if (i % 10 == 0 /*&& i >= nmax*/) {
    string namefile = "TCPC" + i + ".vtk";
    //ofstream kout(path+"../visualizations/stokes_updates/" + namefile);
    ofstream kout(path + namefile);
    include "vtkexport.edp";
    }
}
