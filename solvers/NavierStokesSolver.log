-- FreeFem++ v  3.560000 (date jeu. 20 juil. 2017 19:05:27)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue
    1 : //Unsteady Stokes problem for a TCPC
    2 : // UNITS
    3 : // grams, seconds, millimiters
    4 :
    5 : load "msh3"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\msh3 = 0)
    6 : //load "iovtk"
    7 : load "medit"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\medit = 0)
    8 : load "gmsh"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\gmsh = 0)
    9 :
   10 : mesh3 Th = gmshload3("../mesh/bypass-with-cone-exampleCoarse.msh");
   11 : real rho = 1.06; // Density (g/cm^3)
   12 : real mu = 0.035; // Dynamic viscosity (g/cm.s)
   13 : real nu = mu; // Kinematic viscosity
   14 : real pl = 10132.472; //min pressure in (Th,30) in dyn/cm^2
   15 : real pr = 10100.15; //min pressure in (Th,35)
   16 : real pi = 10500.76;
 *** Warning  The identifier pi hide a Global identifier
 // min pressure in (Th,20) and (Th,25)
   17 : int rup = 0.95; //radii in cm
   18 : int rdw = 1.50;
   19 : fespace Uh(Th,P2);
   20 : Uh ux,uy,uz,vx,vy,vz,uxlast,uylast,uzlast;
   21 : fespace Ph(Th,P1);
   22 : Ph p,q;
   23 : real xdw = -3.;
   24 : real xup = -3.;
   25 : real upm, velNorm, delta; // quantities relevant for SD stabilization
   26 : real vsq = 0.0001; // a very small quantity to guarantee minimal stabilization SD
   27 :
   28 : // Files with pressures
   29 : // measures sampled every 0.0001 seconds
   30 : real dtsampling = 0.0001;
   31 : real Thb = 0.536; // heart beat duration in a child
   32 : int nsamples = 5360; // number of samples we readreal[int,int] Pinf(nsamples,2);
   33 : real[int,int] Pinf(nsamples,2);
   34 : real[int,int] Pleft(nsamples,2);
   35 : real[int,int] Pright(nsamples,2);
   36 : ifstream Inlet("../datasets/updated_flows_dynescm2/inlet.txt");
   37 : ifstream Left("../datasets/updated_flows_dynescm2/left.txt");
   38 : ifstream Right("../datasets/updated_flows_dynescm2/right.txt");
   39 :
   40 : /*
   41 : for (int i = 0; i< nsamples; i++)
   42 : {
   43 :  for (int j=0; j<=1; j++)
   44 :  {
   45 :    Inlet >> Pinf(i,j);   Right >> Pright(i,j);   Left >> Pleft(i,j);
   46 :  }
   47 :   cout << Pinf(i,0) << " " << Pinf(i,1) << endl;
   48 :   cout << Pleft(i,0) << " " << Pleft(i,1) << endl;
   49 :   cout << Pright(i,0) << " " << Pright(i,1) << endl;
   50 : //   cout << time << comma << inletP[i] << endl;
   51 : //   Prf >> time >> comma >> rightP[i] >> endl;
   52 : //   Plf >> time >> comma >> leftP[i] >> endl;
   53 : //
   54 : }
   55 : */
   56 :
   57 : //pl=Pleft(0,1);
   58 : //pr=Pright(0,1);
   59 : //pi=Pinf(0,1);
   60 :
   61 : //func uup=-1000*(rup^2 - ((x-xup)^2+z^2));
   62 : //func udw=1000*(rdw^2 - ((x-xdw)^2+z^2));
   63 : //func pex=pi-(pi-po)*z/L;
   64 :
   65 : problem stokes([ux,uy,uz,p],[vx,vy,vz,q],solver=GMRES,eps=1.e-6) =
   66 :   int3d(Th) ( nu * ( dx(ux)*dx(vx) + dy(ux)*dy(vx) + dz(ux)*dz(vx) + //
   67 :                      dx(uy)*dx(vy) + dy(uy)*dy(vy) + dz(uy)*dz(vy) + // \int_{Th}\grad(u):\grad{v}
   68 :                      dx(uz)*dx(vz) + dy(uz)*dy(vz) + dz(uz)*dz(vz) ) )  //
   69 :    - int3d(Th) ( p*(dx(vx) + dy(vy) + dz(vz)))
   70 :   + int3d(Th) ( q*( dx(ux)+dy(uy)+dz(uz) ) )
   71 : //the pressure condition on our outlet
   72 : + int2d(Th,30)(pl*N.x*vx+pl*N.y*vy+pl*N.z*vz)
   73 : + int2d(Th,35)(pr*N.x*vx+pr*N.y*vy+pr*N.z*vz)
   74 : + int2d(Th,20)(pi*N.x*vx+pi*N.y*vy+pi*N.z*vz)
   75 : + int2d(Th,25)(pi*N.x*vx+pi*N.y*vy+pi*N.z*vz)
   76 : //+ int2d(Th,25)((ux*N.x+uy*N.y+uz*N.z)*(N.x*vx+N.y*vy+N.z*vz))
   77 : //the dirichlet condition for the inflow
   78 : //+ on(20,ux=0.0,uy=uup,uz=0.0)
   79 : //+ on(25,ux=0.0,uy=udw,uz=0.0)
   80 : + on(10,ux=0.0,uy=0.0,uz=0.0);
   81 :
   82 : cout << "Initializing with stokes... " << endl;
   83 : stokes;
   84 : cout << "done!" << endl;
   85 :
   86 : velNorm = int3d(Th)((ux)^2 + (uy)^2 + (uz)^2);
   87 : velNorm = sqrt(abs(velNorm));
   88 : upm = velNorm + vsq;
   89 :
   90 : //real inletP [nsamples];
   91 : //real rightP [nsamples];
   92 : //real leftP [nsamples];
   93 : //real time;
   94 : //string comma;
   95 :
   96 : //ifstream Pinf("./Replicating Dataset/Inlet.csv");
   97 : //ifstream Prf("./Replicating Dataset/Right.csv");
   98 : //ifstream Plf("./Replicating Dataset/Left.csv");
   99 :
  100 : //for (i = 0; i< nsamples; i++)
  101 : //{
  102 : //   Pinf >> time >> comma >> inletP[i] >> endl;
  103 : //   cout << time << comma << inletP[i] << endl;
  104 : //   Prf >> time >> comma >> rightP[i] >> endl;
  105 : //   Plf >> time >> comma >> leftP[i] >> endl;
  106 : //
  107 : //}
  108 :
  109 :
  110 : //File path and name for your vtk output.
  111 : // ofstream kout("../visualizations/TCPC02.vtk");
  112 : // include "vtkexport.edp";
  113 :
  114 :
  115 : real dt= dtsampling;
  116 : real dti= rho/dt;
  117 : real nmax= 5360;
  118 : real t;
  119 : uxlast[] = ux[];
  120 : uylast[] = uy[];
  121 : uzlast[] = uz[];
  122 :
  123 :
  124 : problem SINavierStokes ([ux,uy,uz,p],[vx,vy,vz,q],solver=GMRES,eps=1.e-6) =
  125 :     int3d(Th)(dti*ux*vx + dti*uy*vy + dti*uz*vz )
  126 :     + int3d(Th)(nu* ( dx(ux)*dx(vx) + dy(ux)*dy(vx) +dz(ux)*dz(vx)
  127 :     + dx(uy)*dx(vy) + dy(uy)*dy(vy) + dz(uy)*(vy)
  128 :     + dx(uz)*dx(vz) + dy(uz)*dy(vz) + dz(uz)*dz(vz) ))
  129 :     + int3d(Th)(uxlast*dx(ux)*vx + uxlast*dx(uy)*vy+ uxlast*dx(uz)*vz
  130 :     + uylast*dy(ux)*vx + uylast*dy(uy)*vy +uylast*dy(uz)*vz
  131 :     + uzlast*dz(ux)*vx +uzlast*dz(uy)*vy +uzlast*dz(uz)*vz)
  132 :     - int3d(Th)(p*dx(vx) + p*dy(vy) + p*dz(vz))
  133 :     - int3d(Th)(dx(ux)*q + dy(uy)*q + dz(uz)*q)
  134 :     - int3d(Th)(dti*uxlast*vx + dti*uylast*vy + dti*uzlast*vz)
  135 :     // stabilization techniques
  136 :      + int3d(Th)(delta/upm*hTriangle*uxlast*dx(ux)*uxlast*dx(vx)
  137 :      // streamline diffusion: next 27 terms
  138 :             + delta/upm*hTriangle*uxlast*dx(uy)*uxlast*dx(vy)
  139 :             + delta/upm*hTriangle*uxlast*dx(uz)*uxlast*dx(vz)
  140 :             + delta/upm*hTriangle*uxlast*dx(ux)*uylast*dy(vx)
  141 :             + delta/upm*hTriangle*uxlast*dx(ux)*uzlast*dz(vx)
  142 :             + delta/upm*hTriangle*uxlast*dx(uy)*uylast*dy(vy)
  143 :             + delta/upm*hTriangle*uxlast*dx(uy)*uzlast*dz(vy)
  144 :             + delta/upm*hTriangle*uxlast*dx(uz)*uylast*dy(vz)
  145 :             + delta/upm*hTriangle*uxlast*dx(uz)*uzlast*dz(vz)
  146 :             + delta/upm*hTriangle*uylast*dy(ux)*uxlast*dx(vx)
  147 :             + delta/upm*hTriangle*uylast*dy(uy)*uxlast*dx(vy)
  148 :             + delta/upm*hTriangle*uylast*dy(uz)*uxlast*dx(vz)
  149 :             + delta/upm*hTriangle*uylast*dy(ux)*uylast*dy(vx)
  150 :             + delta/upm*hTriangle*uylast*dy(ux)*uzlast*dz(vx)
  151 :             + delta/upm*hTriangle*uylast*dy(uy)*uylast*dy(vy)
  152 :             + delta/upm*hTriangle*uylast*dy(uy)*uzlast*dz(vy)
  153 :             + delta/upm*hTriangle*uylast*dy(uz)*uylast*dy(vz)
  154 :             + delta/upm*hTriangle*uylast*dy(uz)*uzlast*dz(vz)
  155 :             + delta/upm*hTriangle*uzlast*dz(ux)*uxlast*dx(vx)
  156 :             + delta/upm*hTriangle*uzlast*dz(uy)*uxlast*dx(vy)
  157 :             + delta/upm*hTriangle*uzlast*dz(uz)*uxlast*dx(vz)
  158 :             + delta/upm*hTriangle*uzlast*dz(ux)*uylast*dy(vx)
  159 :             + delta/upm*hTriangle*uzlast*dz(ux)*uzlast*dz(vx)
  160 :             + delta/upm*hTriangle*uzlast*dz(uy)*uylast*dy(vy)
  161 :             + delta/upm*hTriangle*uzlast*dz(uy)*uzlast*dz(vy)
  162 :             + delta/upm*hTriangle*uzlast*dz(uz)*uylast*dy(vz)
  163 :             + delta/upm*hTriangle*uzlast*dz(uz)*uzlast*dz(vz))
  164 :      //the pressure condition on our outlet
  165 :      // + int2d(Th,30)(po*N.x*vx+po*N.y*vy+po*N.z*vz)
  166 :      //the dirichlet condition for the inflow
  167 :      + int2d(Th,30)(pl*N.x*vx+pl*N.y*vy+pl*N.z*vz)
  168 :      + int2d(Th,35)(pr*N.x*vx+pr*N.y*vy+pr*N.z*vz)
  169 :      + int2d(Th,20)(pi*N.x*vx+pi*N.y*vy+pi*N.z*vz)
  170 :      + int2d(Th,25)(pi*N.x*vx+pi*N.y*vy+pi*N.z*vz)    //+ on(20,ux=0,uy=0,uz=uzex)
  171 :      + on(10,ux=0.,uy=0.,uz=0.);
  172 :
  173 : // ulast = ustokes
  174 : delta = 0.1;
  175 :
  176 : for (int i = 0; i< (nmax * 2); i++) {
  177 :     t=dt*i;
  178 :     SINavierStokes;
  179 :     uxlast=ux;
  180 :     uylast=uy;
  181 :     uzlast=uz;
  182 :     velNorm = int3d(Th)((ux)^2 + (uy)^2 + (uz)^2);
  183 :     velNorm = sqrt(abs(velNorm));
  184 :     upm = velNorm + vsq;
  185 :
  186 :     if (i % 10 == 0 /*&& i >= nmax*/) {
  187 :     string namefile = "TCPC" + i + ".vtk";
  188 :     ofstream kout("../visualizations/stokes_updates/" + namefile);
  189 :     include "vtkexport.edp"/********************************************************************
    2 :         This is the vtk file exporter! Do NOT touch this!!!!!
    3 :   ********************************************************************/
    4 :
    5 :
    6 :   Uh[int] uh(3);
    7 :   uh[0] = x;
    8 :   uh[1] = y;
    9 :   uh[2] = z;
   10 :
   11 :
   12 :   {
   13 :   int nvertices = Th.nv;
   14 :   int nelements = Th.nt;
   15 :   int size = Uh.ndof;
   16 :   {
   17 :
   18 :
   19 :
   20 :
   21 :   /*------------------------------------------------------------------------------------------------------------N*----------------------------------
   22 :                                                                                                         HEADER
   23 :   --------------------------------------------------------------------------------------------------------------N*--------------------------------*/
   24 :
   25 :         kout << "# vtk DataFile Version 2.0 "<< endl;
   26 :         kout << "output.vtk, Created by Freefem++, via gregorio" << "\n";
   27 :         kout << "ASCII" << endl;
   28 :         kout << "DATASET UNSTRUCTURED_GRID" << endl;
   29 :
   30 :
   31 :   /*------------------------------------------------------------------------------------------------------------N*----------------------------------
   32 :
POINTS
   33 :   --------------------------------------------------------------------------------------------------------------N*--------------------------------*/
   34 :
   35 :         kout << "POINTS " << size << " double" << endl;
   36 :         for ( int i = 0; i < size; i++)
   37 :         {
   38 :                 real Thx = uh[0][][i];
   39 :                 real Thy = uh[1][][i];
   40 :                 real Thz = uh[2][][i];
   41 :                 kout << Thx  << " " << Thy << " " << Thz << endl;
   42 :         }
   43 :         kout << endl;
   44 :
   45 :
   46 :   /*------------------------------------------------------------------------------------------------------------N*----------------------------------
   47 :
CELLS
   48 :   --------------------------------------------------------------------------------------------------------------N*--------------------------------*/
   49 :
   50 :
   51 :         kout << "CELLS " << nelements << " "<< 5*nelements << endl;
   52 :
   53 :         for( int i = 0;i<nelements; i++) // cciclo sui triangoli
   54 :                 {
   55 :                         kout << 4 << " "; //sono tre i valori da salvare
   56 :                         for(int j = 0; j<4;j++) // 3---> since are triangle
   57 :                         {
   58 :                                 kout << Uh(i,j) << " ";
   59 :                         }
   60 :                         kout << endl;
   61 :                 }
   62 :         kout << endl;
   63 :
   64 :
   65 :         /*------------------------------------------------------------------------------------------------------N*----------------------------------------
   66 :
CELLS TYPES
   67 :   --------------------------------------------------------------------------------------------------------------N*--------------------------------*/
   68 :
   69 :         kout << "CELL_TYPES " << nelements << endl;
   70 :         for(int i=0;i<nelements;i++)
   71 :         {
   72 :                 kout << "10 ";
   73 :         }
   74 :
   75 :         kout << endl;
   76 :
   77 :
   78 :
   79 :         /*------------------------------------------------------------------------------------------------------N*----------------------------------------
   80 :
POINTS DATA
   81 :   --------------------------------------------------------------------------------------------------------------N*--------------------------------*/
   82 :
   83 :
   84 :
   85 :         kout << "POINT_DATA " << size << endl;
   86 :         kout << " "<< endl;
   87 :         int narray = 2;
   88 :         string[int] name(narray);
   89 :         name[0] = "velocity" ;
   90 :         name[1] = "pressure" ;
   91 :         kout << "FIELD " << "FieldData " << narray << endl;
   92 :         for (int h = 0; h<narray; h++)
   93 :         {
   94 :
   95 :                 if (h==0)
   96 :                 {
   97 :                         kout << name[h] << " 3 " << size <<" double" << endl;
   98 :                         for (int i =0; i< size ;i++)
   99 :                         {
  100 :                                 real Thx = uh[0][][i];
  101 :                                 real Thy = uh[1][][i];
  102 :                                 real Thz = uh[2][][i];
  103 :                                 kout << ux(Thx,Thy,Thz) << " " << uy(Thx,Thy,Thz) <<" "<< uz(Thx,Thy,Thz) << endN*l;
  104 :                         }
  105 :                 }
  106 :                 else
  107 :                 {
  108 :                         kout << endl;
  109 :                         kout << name[h] << " 1 " << size <<" double" << endl;
  110 :                         for (int i =0; i< size ;i++)
  111 :                         {
  112 :                                 real Thx = uh[0][][i];
  113 :                                 real Thy = uh[1][][i];
  114 :                                 real Thz = uh[2][][i];
  115 :                                 kout << p(Thx,Thy,Thz) <<  endl;
  116 :                         }
  117 :                 }
  118 :
  119 :         }
  120 :
  121 :   }
  122 :
  123 :   };
  190 :     }
  191 : }
  192 :  sizestack + 1024 =12664  ( 11640 )
 
3949 tetrahedrons
2014 triangles
5963 numElements
  -- Build Nodes/DF on mesh :   n.v. 1248, n. elmt. 3949, n b. elmt. 2014
     nb of Nodes 7451    nb of DoF   7451  DFon=1100
  -- FESpace: Nb of Nodes 7451 Nb of DoF 7451
  -- FESpace: Nb of Nodes 1248 Nb of DoF 1248
Initializing with stokes...
  -- Build Nodes/DF on mesh :   n.v. 1248, n. elmt. 3949, n b. elmt. 2014
     nb of Nodes 7451    nb of DoF   23601  DFon=4300
GMRES converges: 1752 0.36301 364358 9.96302e-007 < 1e-006
  -- Solve :
          min -429.763  max 194.542
          min -214.092  max 360.716
          min -22.9622  max 23.1148
          min 10100  max 10501.3
done!
  -- Build Nodes/DF on mesh :   n.v. 1248, n. elmt. 3949, n b. elmt. 2014
     nb of Nodes 7451    nb of DoF   23601  DFon=4300
GMRES converges: 3043 0.0234394 23454.1 9.99373e-007 < 1e-006
  -- Solve :
          min -429.448  max 194.64
          min -213.91  max 358.347
          min -24.6595  max 23.3813
          min -24658.6  max 39205.4
GMRES converges: 1143 0.0234209 23430.6 9.99583e-007 < 1e-006
  -- Solve :
          min -429.101  max 194.725
          min -213.71  max 356.309
          min -26.6927  max 23.6239
          min -23563.1  max 40048.1
GMRES converges: 260 0.0234042 23407.8 9.99848e-007 < 1e-006
  -- Solve :
          min -428.723  max 194.802
          min -213.719  max 354.569
          min -28.7519  max 23.8091
          min -23323.3  max 40190.7
GMRES converges: 275 0.0233667 23385.1 9.99213e-007 < 1e-006
  -- Solve :
          min -428.316  max 194.866
          min -213.767  max 353.089
          min -30.8306  max 25.8968
          min -23035.1  max 40305.7
GMRES converges: 242 0.0233366 23362.7 9.98883e-007 < 1e-006
  -- Solve :
          min -427.892  max 194.92
          min -213.859  max 351.827
          min -32.9235  max 28.6387
          min -22776.3  max 40393.3
GMRES converges: 225 0.0233296 23340.7 9.99525e-007 < 1e-006
  -- Solve :
          min -427.561  max 194.963
          min -213.997  max 350.739
          min -35.0211  max 31.4014
          min -22526.5  max 40455.7
GMRES converges: 225 0.0232356 23318.9 9.96425e-007 < 1e-006
  -- Solve :
          min -427.231  max 194.995
          min -214.188  max 349.785
          min -37.1177  max 34.169
          min -22302.7  max 40497.2
GMRES converges: 213 0.0232603 23297.5 9.98401e-007 < 1e-006
  -- Solve :
          min -426.902  max 195.017
          min -214.433  max 348.928
          min -39.2034  max 36.9276
          min -22092.1  max 40517.9
GMRES converges: 226 0.023175 23276.5 9.95638e-007 < 1e-006
  -- Solve :
          min -426.571  max 195.028
          min -214.739  max 348.134
          min -41.2697  max 39.6626
          min -21903.8  max 40517.4
GMRES converges: 227 0.0230936 23255.8 9.93023e-007 < 1e-006
  -- Solve :
          min -426.24  max 195.029
          min -215.108  max 347.376
          min -43.3059  max 42.3602
          min -21728.7  max 40495.7
GMRES converges: 227 0.0230871 23235.6 9.9361e-007 < 1e-006
  -- Solve :
          min -425.908  max 195.018
          min -215.544  max 346.631
          min -45.3021  max 45.007
          min -21565.9  max 40457
GMRES converges: 227 0.0231419 23215.7 9.9682e-007 < 1e-006
  -- Solve :
          min -425.573  max 194.995
          min -216.054  max 345.881
          min -47.2486  max 47.5894
          min -21408.6  max 40406.2
GMRES converges: 227 0.0231827 23196.3 9.99413e-007 < 1e-006
  -- Solve :
          min -425.234  max 194.96
          min -216.64  max 345.113
          min -49.1356  max 50.095
          min -21246.8  max 40346
GMRES converges: 227 0.0231187 23177.2 9.97477e-007 < 1e-006
  -- Solve :
          min -424.892  max 194.912
          min -217.308  max 344.319
          min -50.9535  max 52.5115
          min -21076.2  max 40282.1
GMRES converges: 212 0.0230989 23158.6 9.97425e-007 < 1e-006
  -- Solve :
          min -424.546  max 194.852
          min -218.061  max 343.495
          min -52.6929  max 54.8278
          min -20887.2  max 40224.1
GMRES converges: 207 0.0231376 23140.3 9.99882e-007 < 1e-006
  -- Solve :
          min -424.195  max 194.779
          min -218.905  max 342.638
          min -54.3454  max 57.0327
          min -20683.5  max 40172.4
GMRES converges: 193 0.0230502 23122.4 9.96877e-007 < 1e-006
  -- Solve :
          min -423.839  max 194.695
          min -219.842  max 341.748
          min -55.9035  max 59.116
          min -20463.3  max 40142.3
GMRES converges: 179 0.0230378 23104.8 9.971e-007 < 1e-006
  -- Solve :
          min -423.479  max 194.599
          min -220.876  max 340.829
          min -57.3597  max 61.0692
          min -20219.7  max 40112.8
GMRES converges: 178 0.0229885 23087.7 9.95705e-007 < 1e-006
  -- Solve :
          min -423.113  max 194.491
          min -222.014  max 339.885
          min -58.7078  max 62.8849
          min -19960.2  max 40085.3
GMRES converges: 177 0.0229161 23070.8 9.93295e-007 < 1e-006
  -- Solve :
          min -422.742  max 194.519
          min -223.259  max 338.92
          min -59.9427  max 64.5565
          min -19688.6  max 40065
GMRES converges: 174 0.0230511 23054.4 9.99857e-007 < 1e-006
  -- Solve :
          min -422.366  max 194.565
          min -224.614  max 337.939
          min -61.0601  max 66.0792
          min -19403.7  max 40051.3
GMRES converges: 178 0.0228093 23038.3 9.9006e-007 < 1e-006
  -- Solve :
          min -421.985  max 194.61
          min -226.072  max 336.948
          min -62.057  max 67.451
          min -19100.2  max 40031
GMRES converges: 177 0.0229715 23022.6 9.97782e-007 < 1e-006
  -- Solve :
          min -421.599  max 194.653
          min -227.655  max 335.95
          min -62.9321  max 68.6676
          min -18798.9  max 40030.5
GMRES converges: 180 0.0229323 23007.2 9.96743e-007 < 1e-006
  -- Solve :
          min -421.206  max 194.695
          min -229.351  max 334.951
          min -63.6842  max 69.7314
          min -18473.5  max 40024.4
GMRES converges: 193 0.0229285 22992.2 9.97227e-007 < 1e-006
  -- Solve :
          min -420.808  max 194.736
          min -231.179  max 333.952
          min -64.3146  max 70.6417
          min -18145.2  max 40030.6
GMRES converges: 192 0.0229427 22977.6 9.98481e-007 < 1e-006
  -- Solve :
          min -420.403  max 194.777
          min -233.129  max 332.957
          min -65.7545  max 71.402
          min -17808.9  max 40048.9
GMRES converges: 195 0.022846 22963.3 9.94893e-007 < 1e-006
  -- Solve :
          min -419.992  max 194.818
          min -235.219  max 331.967
          min -69.2291  max 72.0175
          min -17449.9  max 40063.7
GMRES converges: 193 0.0229269 22949.4 9.9902e-007 < 1e-006
  -- Solve :
          min -419.573  max 194.858
          min -237.442  max 330.983
          min -72.6589  max 72.4937
          min -17096  max 40096.3
GMRES converges: 196 0.0229207 22935.8 9.99343e-007 < 1e-006
  -- Solve :
          min -419.145  max 194.898
          min -239.809  max 330.007
          min -76.0314  max 72.8385
          min -16712.6  max 40118.7
GMRES converges: 195 0.0228734 22922.5 9.97857e-007 < 1e-006
  -- Solve :
          min -418.707  max 194.937
          min -242.32  max 329.038
          min -79.3293  max 73.0599
          min -16334.3  max 40151.5
GMRES converges: 195 0.0228143 22909.6 9.95837e-007 < 1e-006
  -- Solve :
          min -418.26  max 194.977
          min -244.982  max 328.077
          min -82.5387  max 73.948
          min -15944.7  max 40177.5
GMRES converges: 193 0.0228737 22897.1 9.9898e-007 < 1e-006
  -- Solve :
          min -417.8  max 195.015
          min -247.8  max 327.121
          min -85.6444  max 76.1823
          min -15559.7  max 40197.9
GMRES converges: 193 0.0228585 22884.8 9.98851e-007 < 1e-006
  -- Solve :
          min -417.327  max 195.054
          min -250.777  max 326.171
          min -88.6329  max 78.3017
          min -15167.6  max 40203.7
GMRES converges: 179 0.0228608 22872.9 9.9947e-007 < 1e-006
  -- Solve :
          min -416.84  max 195.092
          min -253.921  max 325.227
          min -91.4896  max 80.298
          min -14787  max 40198.5
GMRES converges: 179 0.0227082 22861.3 9.93306e-007 < 1e-006
  -- Solve :
          min -416.337  max 195.129
          min -257.234  max 324.287
          min -94.2027  max 82.163
          min -14404.4  max 40174.8
GMRES converges: 177 0.022771 22850 9.96546e-007 < 1e-006
  -- Solve :
          min -415.816  max 195.165
          min -260.724  max 323.351
          min -96.7588  max 83.8896
          min -14038.8  max 40137.7
GMRES converges: 177 0.0227312 22838.9 9.95282e-007 < 1e-006
  -- Solve :
          min -415.276  max 195.2
          min -264.393  max 322.42
          min -99.1487  max 85.4707
          min -13670.9  max 40077.9
GMRES converges: 177 0.0226778 22828.2 9.93409e-007 < 1e-006
  -- Solve :
          min -414.716  max 195.234
          min -268.242  max 321.492
          min -101.362  max 86.9003
          min -13316.6  max 40000.5
GMRES converges: 176 0.0228074 22817.8 9.99545e-007 < 1e-006
  -- Solve :
          min -414.133  max 195.266
          min -272.283  max 320.567
          min -103.391  max 88.1731
          min -12976  max 39907.1
GMRES converges: 177 0.0227794 22807.7 9.98759e-007 < 1e-006
  -- Solve :
          min -413.527  max 195.297
          min -276.515  max 319.647
          min -105.229  max 89.2845
          min -12638.6  max 39905
GMRES converges: 177 0.0226965 22797.8 9.95553e-007 < 1e-006
  -- Solve :
          min -412.895  max 195.325
          min -280.947  max 319.71
          min -106.87  max 90.2308
          min -12319.7  max 40028.6
